{"version":3,"sources":["context/socket.js","components/pages/Client.jsx","components/pages/Dashboard.jsx","App.js","reportWebVitals.js","index.js"],"names":["console","log","process","socket","io","transports","SocketContext","React","createContext","Client","useContext","useState","currInterval","setCurrInterval","location","setLocation","useEffect","interval","setInterval","getLocation","clearInterval","emit","toggleInterval","a","navigator","geolocation","getCurrentPosition","loc","lat","coords","latitude","lng","longitude","onClick","Dashboard","room","setRoom","on","checkLocation","disconnect","App","home","client","dashboard","pages","setPages","handlePage","event","target","value","page","Provider","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","path","element","document","getElementById"],"mappings":"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","file":"static/js/main.4e734248.chunk.js","sourcesContent":["import React from 'react';\nimport io from \"socket.io-client\"; \nconst BASE_URL = process.env.NODE_ENV === 'production'\n    ? '/'\n    : 'localhost:3001'; \n    \n\nconsole.log(BASE_URL,process.env.REACT_APP_SOCKET_URL);\nexport const socket = io(BASE_URL, { transports: ['websocket'] });\nexport const SocketContext = React.createContext();","import React, { useContext, useEffect, useState } from 'react';\r\nimport { SocketContext } from '../../context/socket';\r\n\r\n\r\nexport default function Client() {\r\n  const socket = useContext(SocketContext);\r\n  const [currInterval, setCurrInterval] = useState(null)\r\n  const [location, setLocation] = useState(null)\r\n  // const [isAutoLocation, seIsAutoLocation] = useState(null)\r\n  \r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      console.log('This will run every second!');\r\n      getLocation()\r\n    }, 1000);\r\n    setCurrInterval(interval);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n\r\n  useEffect(() => {\r\n      // console.log('currInterval',currInterval)\r\n  }, [currInterval]);\r\n\r\n  useEffect(() => {\r\n    if (location === null){\r\n        getLocation();\r\n    }\r\n  }, [location]);\r\n\r\n  useEffect(() => {\r\n    console.log('emit location', location)\r\n    socket.emit('send location', location);\r\n  }, [location]);\r\n\r\n\r\n  const toggleInterval = async () => {\r\n    console.log('currInterval',currInterval)\r\n    if(currInterval) {\r\n      clearInterval(currInterval)\r\n      setCurrInterval(null)\r\n    }else{\r\n      const interval = setInterval(() => {\r\n        console.log('This will run every second! 2');\r\n        getLocation()\r\n      }, 6000);\r\n      setCurrInterval(interval);\r\n      return () => clearInterval(interval);\r\n    }\r\n  }\r\n\r\n  const getLocation = async () => {\r\n        await navigator.geolocation.getCurrentPosition(loc => {\r\n        // console.log(\"Latitude is :\", location.coords.latitude);\r\n        // console.log(\"Longitude is :\", location.coords.longitude);\r\n        setLocation({\r\n          lat:loc.coords.latitude,\r\n          lng:loc.coords.longitude\r\n        });\r\n        return loc\r\n        // socket.emit('send location', loc);\r\n      });\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <p>Hellow World Client</p>\r\n      <button onClick={toggleInterval}>Auto Update Location {currInterval ? ' on': 'off'}</button>\r\n      <button onClick={getLocation}>Menual Update Location</button>\r\n      {location && <div>\r\n           <p><span>Lat: </span> <span>{location.lat}  </span></p>\r\n           <p><span>Lng: </span> <span>{location.lng}  </span></p>\r\n        </div>}\r\n\r\n    </div>\r\n  );\r\n}","import React, { useContext, useEffect, useState } from 'react';\r\nimport { SocketContext } from '../../context/socket';\r\n\r\nexport default function Dashboard() {\r\n  const socket = useContext(SocketContext);\r\n  const [location, setLocation] = useState(null)\r\n  const [room,setRoom]  = useState(null)\r\n\r\n  socket.on('get location', (location) => {\r\n    console.log('send location emited', location)\r\n    setLocation(location)\r\n  });\r\n\r\n  useEffect(() => {\r\n    console.log(location, ' location');\r\n    if(location){\r\n      checkLocation(location)\r\n    }\r\n  }, [location])\r\n\r\n  useEffect(() => {\r\n    socket.on('get location', (location) => {\r\n      console.log('send location emited', location)\r\n      setLocation(location)\r\n    });\r\n    return () => socket.disconnect();\r\n  }, [])\r\n\r\n  const checkLocation = (location)=>{\r\n    // Lat: 32.081018175898\r\n    // Lng: 34.81045157577791\r\n\r\n    // Lat: 32.08101693542503\r\n    // Lng: 34.8105005090152\r\n\r\n    // Lat: 32.08101546744883\r\n    // Lng: 34.810659871069355\r\n\r\n    // Lat: 32.080994029196276\r\n    // Lng: 34.81066633233255\r\n    let lat = location.lat;\r\n    let lng = location.lng;\r\n    if (lat < 32.081018175898 && lat > 32.080994029196276 &&\r\n       lng > 34.81045157577791 && lng < 34.81066633233255){\r\n        setRoom('Living Room')\r\n    }else{\r\n      setRoom(null)\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <p>Hellow World Dashboard :</p>\r\n      {location && <div>\r\n        <span>location.lat: {location.lat}</span>\r\n        <span>location.lng: {location.lng}</span>\r\n      </div>\r\n      }\r\n      Room:\r\n      {room && <p>{room}</p>}\r\n    </div>\r\n  );\r\n}","import './App.css';\nimport React, { useState, useEffect } from 'react';\n\nimport { socket, SocketContext } from './context/socket';\nimport {\n\tRoutes,\n\tRoute,\n\tLink,\n\tOutlet\n} from \"react-router-dom\";\n\nimport HeaderComponent from './components/comman/header.component';\nimport Client from './components/pages/Client';\nimport Dashboard from './components/pages/Dashboard';\n\nfunction App() {\n\tconst [pages , setPages] =  useState({home:true, client:null, dashboard:null})\n\n\tconst handlePage = (event)=>{\n\t\tconsole.log('page event',event.target.value)\n\t\tlet page = event.target.value;\n\t\tsetPages({home:null,client:null, dashboard:null})\n\t\tsetPages({ [page]:true })\n\t  }\n\n\treturn (\n\t\t<SocketContext.Provider  value={socket}>\n\n\t\t\t<div className=\"container\">\n\t\t\t<button value=\"home\" onClick={handlePage}>Home</button>\n        \t<button value=\"client\" onClick={handlePage}>Client</button>\n        \t<button value=\"dashboard\" onClick={handlePage}>Dashboard</button>\n\t\t\t{/* <Outlet /> */}\n\t\t\t{pages.home && <div>Hellow World Home</div>}\n\t\t\t{pages.client && <Client />}\n\t\t\t{pages.dashboard && <Dashboard />}\n\t\t\t</div>\n\t  </SocketContext.Provider>\n\n\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {\n\tBrowserRouter,\n\tRoutes,\n\tRoute\n  } from \"react-router-dom\";\n\nimport Client from './components/pages/Client';\nimport Dashboard from './components/pages/Dashboard';\n\n\nReactDOM.render(\n<BrowserRouter>\n    <Routes>\n      <Route path=\"/\" element={<App />}>\n      <Route path=\"/client\" element={<Client />} />\n      <Route path=\"/dashboard\" element={<Dashboard />} />\n      </Route>\n    </Routes>\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n  // <React.Fragment>\n  //   <App />\n  // </React.Fragment>,\n  // document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}